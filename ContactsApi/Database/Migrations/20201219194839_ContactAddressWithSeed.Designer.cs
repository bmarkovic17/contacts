// <auto-generated />
using System;
using ContactsApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ContactsApi.Database.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    [Migration("20201219194839_ContactAddressWithSeed")]
    partial class ContactAddressWithSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ContactsApi.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("address_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedOrUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_or_updated");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postcode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("FirstName", "Surname", "Street", "AddressNumber", "Postcode", "City", "Country")
                        .IsUnique()
                        .HasDatabaseName("contact_uidx");

                    b.ToTable("contacts");

                    b
                        .HasComment("Data about contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressNumber = "8106",
                            City = "Schenectady",
                            Country = "New York, US",
                            CreatedOrUpdated = new DateTime(2020, 12, 19, 20, 48, 38, 671, DateTimeKind.Local).AddTicks(8786),
                            DateOfBirth = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keanu",
                            Postcode = "12302",
                            Street = "Linda Ave.",
                            Surname = "Reeves"
                        },
                        new
                        {
                            Id = 2,
                            AddressNumber = "7201",
                            City = "Easton",
                            Country = "Pennsylvania, US",
                            CreatedOrUpdated = new DateTime(2020, 12, 19, 20, 48, 38, 675, DateTimeKind.Local).AddTicks(1512),
                            DateOfBirth = new DateTime(1981, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Roger",
                            Postcode = "18042",
                            Street = "N. Roehampton Ave.",
                            Surname = "Federer"
                        },
                        new
                        {
                            Id = 3,
                            AddressNumber = "57",
                            City = "Bern",
                            Country = "Switzerland",
                            CreatedOrUpdated = new DateTime(2020, 12, 19, 20, 48, 38, 675, DateTimeKind.Local).AddTicks(1942),
                            DateOfBirth = new DateTime(1971, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mark",
                            Postcode = "3027",
                            Street = "Erlenweg",
                            Surname = "Wahlberg"
                        },
                        new
                        {
                            Id = 4,
                            AddressNumber = "3357",
                            City = "Schenectady",
                            Country = "New York, US",
                            CreatedOrUpdated = new DateTime(2020, 12, 19, 20, 48, 38, 675, DateTimeKind.Local).AddTicks(1949),
                            FirstName = "Superman",
                            Postcode = "12303",
                            Street = "Golden Ridge Road"
                        },
                        new
                        {
                            Id = 5,
                            AddressNumber = "4597",
                            City = "Fort Lauderdale",
                            Country = "Florida, US",
                            CreatedOrUpdated = new DateTime(2020, 12, 19, 20, 48, 38, 675, DateTimeKind.Local).AddTicks(1954),
                            DateOfBirth = new DateTime(1955, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bill",
                            Postcode = "33308",
                            Street = "Pointe Lane",
                            Surname = "Gates"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
